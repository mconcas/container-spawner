sudo: requires

services:
 - docker

language: python

before_install:
  - sudo apt-get -qq update
  - sudo apt-get install -y jq

install: |
  set -x
  git rev-parse HEAD
  sudo pip install -e .

script: |
  set -ex
  dielog() {
    sudo cat $LOGFILE
    return 1
  }
  nosudo() {
    "$@"
  }

  for MODE in sudo nosudo; do
    case $MODE in
      sudo)   PIDFILE=/var/run/plancton.pid
              LOGFILE=/var/log/plancton/plancton.log
              DRAINFILE=/var/run/plancton/drain
              STOPFILE=/var/run/plancton/stop
              CONFDIR=/var/run/plancton/conf ;;
      nosudo) PIDFILE=$HOME/.plancton/run/plancton.pid
              LOGFILE=$HOME/.plancton/log/plancton.log
              DRAINFILE=$HOME/.plancton/run/drain
              STOPFILE=$HOME/.plancton/run/stop
              CONFDIR=$HOME/.plancton/conf ;;
    esac

    # Test Plancton startup
    $MODE planctonctl start
    $MODE test -f $PIDFILE || dielog
    $MODE kill -0 $($MODE cat $PIDFILE) || dielog

    # Test Plancton drain mode
    $MODE planctonctl drain
    $MODE test -f $DRAINFILE || dielog
    sleep 40
    $MODE grep -qi "no new containers will be started" $LOGFILE || dielog

    # Test Plancton exiting drain mode
    $MODE planctonctl resume
    ! $MODE test -f $DRAINFILE || dielog

    # Test Plancton force-stop mode
    $MODE planctonctl force-stop
    $MODE grep -qi "not starting containers, killing existing" $LOGFILE || dielog

    # Test Plancton drain and then stop mode
    $MODE planctonctl start
    $MODE test -f $PIDFILE || dielog
    $MODE kill -0 $($MODE cat $PIDFILE) || dielog
    $MODE planctonctl drain-stop
    $MODE test -f $DRAINFILE || dielog
    sleep 40
    $MODE grep -qi "no new containers will be started" $LOGFILE || dielog
    $MODE grep -qi "drain-stop requested" $LOGFILE || dielog
    $MODE test -f $DRAINFILE || dielog
    ! $MODE test -f $STOPFILE || dielog

    # Test Plancton stop
    $MODE planctonctl stop
    ! $MODE test -f $PIDFILE || dielog

    # Test Plancton multi-streaming
    $MODE rm -f $DRAINFILE || true
    $MODE mkdir -p $CONFDIR
    echo "influxdb_url:" | $MODE tee $CONFDIR/config.yaml
    for I in {1..2}; do
      echo "- http://0.0.0.0:$(docker run -d -P influxdb | xargs docker port | awk '{print $3}' | cut -d: -f2 | tee -a influxdb_ports)#plancton-monitor" | \
        $MODE tee -a $CONFDIR/config.yaml
    done
    openssl req -x509 -newkey rsa:4096 -nodes -subj "/CN=fuffadomain.com" -keyout key.pem -out cert.pem -days 365
    for I in {1..2}; do
      echo "- insecure_https://0.0.0.0:$(docker run -d -v $PWD/cert.pem:/cert.pem -v $PWD/key.pem:/key.pem -e INFLUXDB_HTTP_HTTPS_ENABLED=true -e INFLUXDB_HTTP_HTTPS_CERTIFICATE=/cert.pem -e INFLUXDB_HTTP_HTTPS_PRIVATE_KEY=/key.pem -P influxdb | xargs docker port | awk '{print $3}' | cut -d: -f2 | tee -a influxdb_ports_https)#plancton-monitor" | \
        $MODE tee -a $CONFDIR/config.yaml
    done

    $MODE planctonctl --confdir=$CONFDIR start
    sleep 60
    PROTO=http
    for PORT in $(cat influxdb_ports) https $(cat influxdb_ports_https); do
      [[ $PORT == https ]] && { PROTO=https; continue; } || true
      OUT=$(curl -ks $PROTO://0.0.0.0:$PORT/query?pretty=true --data db=plancton-monitor --data-urlencode 'q=SELECT COUNT(*) FROM "measurement"' | \
        jq '.results[0].series[0].values[0][1]')
      [[ $OUT -gt 0 ]] || { echo "ERROR: InfluxDB good query on port $PORT returned $OUT"; dielog; }
      OUT=$(curl -ks $PROTO://0.0.0.0:$PORT/query?pretty=true --data db=plancton-monitor-nope --data-urlencode 'q=SELECT COUNT(*) FROM "measurement"' | \
        jq '.results[0].series[0].values[0][1]')
      [[ $OUT == null ]] || { echo "ERROR: InfluxDB bad query on port $PORT returned $OUT"; dielog; }
    done
    $MODE rm -f influxdb_ports influxdb_ports_https
  done
