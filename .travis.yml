sudo: requires

services:
 - docker

language: python

before_install:
  - sudo apt-get -qq update
  - sudo apt-get install -y jq

install: |
  set -x
  git rev-parse HEAD
  sudo pip install -e .

script: |
  set -ex
  dielog() {
    sudo cat $LOGFILE
    return 1
  }
  nosudo() {
    "$@"
  }

  for MODE in sudo nosudo; do
    case $MODE in
      sudo)   PIDFILE=/var/run/plancton.pid
              LOGFILE=/var/log/plancton/plancton.log
              DRAINFILE=/var/run/plancton/drain
              STOPFILE=/var/run/plancton/stop
              CONFDIR=/var/run/plancton/conf ;;
      nosudo) PIDFILE=$HOME/.plancton/run/plancton.pid
              LOGFILE=$HOME/.plancton/log/plancton.log
              DRAINFILE=$HOME/.plancton/run/drain
              STOPFILE=$HOME/.plancton/run/stop
              CONFDIR=$HOME/.plancton/run/conf ;;
    esac

    # Test Plancton startup
    $MODE planctonctl start
    $MODE test -f $PIDFILE || dielog
    $MODE kill -0 $($MODE cat $PIDFILE) || dielog

    # Test Plancton drain mode
    $MODE planctonctl drain
    $MODE test -f $DRAINFILE || dielog
    sleep 40
    $MODE grep -qi "no new containers will be started" $LOGFILE || dielog

    # Test Plancton exiting drain mode
    $MODE planctonctl resume
    ! $MODE test -f $DRAINFILE || dielog

    # Test Plancton force-stop mode
    $MODE planctonctl force-stop
    $MODE grep -qi "not starting containers, killing existing" $LOGFILE || dielog

    # Test Plancton drain and then stop mode
    $MODE planctonctl start
    $MODE test -f $PIDFILE || dielog
    $MODE kill -0 $($MODE cat $PIDFILE) || dielog
    $MODE planctonctl drain-stop
    $MODE test -f $DRAINFILE || dielog
    sleep 40
    $MODE grep -qi "no new containers will be started" $LOGFILE || dielog
    $MODE grep -qi "drain-stop requested" $LOGFILE || dielog
    $MODE test -f $DRAINFILE || dielog
    ! $MODE test -f $STOPFILE || dielog

    # Test Plancton stop
    $MODE planctonctl stop
    ! $MODE test -f $PIDFILE || dielog

    # Test Plancton multi-streaming
    $MODE rm -f $DRAINFILE || true
    $MODE mkdir -p $CONFDIR
    echo -e "---\ninfluxdb_url:" | $MODE tee $CONFDIR/config.yaml
    for i in {1..3}; do
      echo "  - http://0.0.0.0:$(docker run -d -P influxdb | xargs docker port | awk '{print $3}' | cut -d':' -f2 | tee -a ports)#plancton-monitor" |\
        $MODE tee -a $CONFDIR/config.yaml
    done

    $MODE planctonctl --confdir=$CONFDIR start
    sleep 60
    for i in $(cat ports); do
      GOOD_RET_VAL=$(curl -s http://0.0.0.0:$i/query?pretty=true --data db=plancton-monitor --data-urlencode 'q=SELECT COUNT(*) FROM "measurement"' |\
        jq '.results[0].series[0].values[0][1]')
      [[ "$GOOD_RET_VAL" -gt "0" ]] && echo "Test good query ($i) -> success" || dielog
      BAD_RET_VAL=$(curl -s http://0.0.0.0:$i/query?pretty=true --data db=plancton-monitorBAD --data-urlencode 'q=SELECT COUNT(*) FROM "measuentBAD"' |\
        jq '.results[0].series[0].values[0][1]')
      [[ "$BAD_RET_VAL" == "null" ]] && echo "Test bad query ($i) -> success" || dielog
    done
    $MODE rm -f ports
  done
